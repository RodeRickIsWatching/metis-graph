// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LockedParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LockedParam entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LockedParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LockedParam", id.toString(), this);
  }

  static load(id: string): LockedParam | null {
    return store.get("LockedParam", id) as LockedParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get signer(): string {
    let value = this.get("signer");
    return value.toString();
  }

  set signer(value: string) {
    this.set("signer", Value.fromString(value));
  }

  get sequencerId(): BigInt {
    let value = this.get("sequencerId");
    return value.toBigInt();
  }

  set sequencerId(value: BigInt) {
    this.set("sequencerId", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get activationBatch(): BigInt {
    let value = this.get("activationBatch");
    return value.toBigInt();
  }

  set activationBatch(value: BigInt) {
    this.set("activationBatch", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    return value.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }

  get signerPubkey(): string {
    let value = this.get("signerPubkey");
    return value.toString();
  }

  set signerPubkey(value: string) {
    this.set("signerPubkey", Value.fromString(value));
  }
}

export class UnlockedParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnlockedParam entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnlockedParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnlockedParam", id.toString(), this);
  }

  static load(id: string): UnlockedParam | null {
    return store.get("UnlockedParam", id) as UnlockedParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get sequencerId(): BigInt {
    let value = this.get("sequencerId");
    return value.toBigInt();
  }

  set sequencerId(value: BigInt) {
    this.set("sequencerId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    return value.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }
}

export class UnlockInitParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnlockInitParam entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnlockInitParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnlockInitParam", id.toString(), this);
  }

  static load(id: string): UnlockInitParam | null {
    return store.get("UnlockInitParam", id) as UnlockInitParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get sequencerId(): BigInt {
    let value = this.get("sequencerId");
    return value.toBigInt();
  }

  set sequencerId(value: BigInt) {
    this.set("sequencerId", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get deactivationBatch(): BigInt {
    let value = this.get("deactivationBatch");
    return value.toBigInt();
  }

  set deactivationBatch(value: BigInt) {
    this.set("deactivationBatch", Value.fromBigInt(value));
  }

  get deactivationTime(): BigInt {
    let value = this.get("deactivationTime");
    return value.toBigInt();
  }

  set deactivationTime(value: BigInt) {
    this.set("deactivationTime", Value.fromBigInt(value));
  }

  get unlockClaimTime(): BigInt {
    let value = this.get("unlockClaimTime");
    return value.toBigInt();
  }

  set unlockClaimTime(value: BigInt) {
    this.set("unlockClaimTime", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class RelockedParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RelockedParam entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RelockedParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RelockedParam", id.toString(), this);
  }

  static load(id: string): RelockedParam | null {
    return store.get("RelockedParam", id) as RelockedParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get sequencerId(): BigInt {
    let value = this.get("sequencerId");
    return value.toBigInt();
  }

  set sequencerId(value: BigInt) {
    this.set("sequencerId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    return value.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }
}

export class WithrawDelayTimeChangeParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save WithrawDelayTimeChangeParam entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WithrawDelayTimeChangeParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WithrawDelayTimeChangeParam", id.toString(), this);
  }

  static load(id: string): WithrawDelayTimeChangeParam | null {
    return store.get(
      "WithrawDelayTimeChangeParam",
      id
    ) as WithrawDelayTimeChangeParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get newWithrawDelayTime(): BigInt {
    let value = this.get("newWithrawDelayTime");
    return value.toBigInt();
  }

  set newWithrawDelayTime(value: BigInt) {
    this.set("newWithrawDelayTime", Value.fromBigInt(value));
  }

  get oldWithrawDelayTime(): BigInt {
    let value = this.get("oldWithrawDelayTime");
    return value.toBigInt();
  }

  set oldWithrawDelayTime(value: BigInt) {
    this.set("oldWithrawDelayTime", Value.fromBigInt(value));
  }
}

export class RewardUpdateParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RewardUpdateParam entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RewardUpdateParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RewardUpdateParam", id.toString(), this);
  }

  static load(id: string): RewardUpdateParam | null {
    return store.get("RewardUpdateParam", id) as RewardUpdateParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get oldReward(): BigInt {
    let value = this.get("oldReward");
    return value.toBigInt();
  }

  set oldReward(value: BigInt) {
    this.set("oldReward", Value.fromBigInt(value));
  }

  get newReward(): BigInt {
    let value = this.get("newReward");
    return value.toBigInt();
  }

  set newReward(value: BigInt) {
    this.set("newReward", Value.fromBigInt(value));
  }
}

export class ClaimRewardsParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ClaimRewardsParam entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ClaimRewardsParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ClaimRewardsParam", id.toString(), this);
  }

  static load(id: string): ClaimRewardsParam | null {
    return store.get("ClaimRewardsParam", id) as ClaimRewardsParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get sequencerId(): BigInt {
    let value = this.get("sequencerId");
    return value.toBigInt();
  }

  set sequencerId(value: BigInt) {
    this.set("sequencerId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    return value.toBigInt();
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }
}

export class LockUpdateParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LockUpdateParam entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LockUpdateParam entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LockUpdateParam", id.toString(), this);
  }

  static load(id: string): LockUpdateParam | null {
    return store.get("LockUpdateParam", id) as LockUpdateParam | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get sequencerId(): BigInt {
    let value = this.get("sequencerId");
    return value.toBigInt();
  }

  set sequencerId(value: BigInt) {
    this.set("sequencerId", Value.fromBigInt(value));
  }

  get newAmount(): BigInt {
    let value = this.get("newAmount");
    return value.toBigInt();
  }

  set newAmount(value: BigInt) {
    this.set("newAmount", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }
}
