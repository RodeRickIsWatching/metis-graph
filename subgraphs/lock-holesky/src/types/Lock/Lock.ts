// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Locked extends ethereum.Event {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sequencerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get activationBatch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get signerPubkey(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class Unlocked extends ethereum.Event {
  get params(): Unlocked__Params {
    return new Unlocked__Params(this);
  }
}

export class Unlocked__Params {
  _event: Unlocked;

  constructor(event: Unlocked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sequencerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UnlockInit extends ethereum.Event {
  get params(): UnlockInit__Params {
    return new UnlockInit__Params(this);
  }
}

export class UnlockInit__Params {
  _event: UnlockInit;

  constructor(event: UnlockInit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sequencerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deactivationBatch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get deactivationTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get unlockClaimTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Relocked extends ethereum.Event {
  get params(): Relocked__Params {
    return new Relocked__Params(this);
  }
}

export class Relocked__Params {
  _event: Relocked;

  constructor(event: Relocked) {
    this._event = event;
  }

  get sequencerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithrawDelayTimeChange extends ethereum.Event {
  get params(): WithrawDelayTimeChange__Params {
    return new WithrawDelayTimeChange__Params(this);
  }
}

export class WithrawDelayTimeChange__Params {
  _event: WithrawDelayTimeChange;

  constructor(event: WithrawDelayTimeChange) {
    this._event = event;
  }

  get newWithrawDelayTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldWithrawDelayTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardUpdate extends ethereum.Event {
  get params(): RewardUpdate__Params {
    return new RewardUpdate__Params(this);
  }
}

export class RewardUpdate__Params {
  _event: RewardUpdate;

  constructor(event: RewardUpdate) {
    this._event = event;
  }

  get newReward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LockUpdate extends ethereum.Event {
  get params(): LockUpdate__Params {
    return new LockUpdate__Params(this);
  }
}

export class LockUpdate__Params {
  _event: LockUpdate;

  constructor(event: LockUpdate) {
    this._event = event;
  }

  get sequencerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimRewards extends ethereum.Event {
  get params(): ClaimRewards__Params {
    return new ClaimRewards__Params(this);
  }
}

export class ClaimRewards__Params {
  _event: ClaimRewards;

  constructor(event: ClaimRewards) {
    this._event = event;
  }

  get sequencerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Lock__mpcHistoryResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Lock__sequencerStateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Lock__sequencerStateChangesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class Lock__sequencersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: i32;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: i32,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }
}

export class Lock extends ethereum.SmartContract {
  static bind(address: Address): Lock {
    return new Lock("Lock", address);
  }

  BLOCK_REWARD(): BigInt {
    let result = super.call("BLOCK_REWARD", "BLOCK_REWARD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BLOCK_REWARD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BLOCK_REWARD", "BLOCK_REWARD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NFTContract(): Address {
    let result = super.call("NFTContract", "NFTContract():(address)", []);

    return result[0].toAddress();
  }

  try_NFTContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("NFTContract", "NFTContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  NFTCounter(): BigInt {
    let result = super.call("NFTCounter", "NFTCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_NFTCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("NFTCounter", "NFTCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WITHDRAWAL_DELAY(): BigInt {
    let result = super.call(
      "WITHDRAWAL_DELAY",
      "WITHDRAWAL_DELAY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WITHDRAWAL_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WITHDRAWAL_DELAY",
      "WITHDRAWAL_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchSubmitRewards(
    batchId: BigInt,
    payeer: Address,
    startEpoch: BigInt,
    endEpoch: BigInt,
    sequencers: Array<Address>,
    finishedBlocks: Array<BigInt>,
    signature: Bytes
  ): BigInt {
    let result = super.call(
      "batchSubmitRewards",
      "batchSubmitRewards(uint256,address,uint256,uint256,address[],uint256[],bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(batchId),
        ethereum.Value.fromAddress(payeer),
        ethereum.Value.fromUnsignedBigInt(startEpoch),
        ethereum.Value.fromUnsignedBigInt(endEpoch),
        ethereum.Value.fromAddressArray(sequencers),
        ethereum.Value.fromUnsignedBigIntArray(finishedBlocks),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_batchSubmitRewards(
    batchId: BigInt,
    payeer: Address,
    startEpoch: BigInt,
    endEpoch: BigInt,
    sequencers: Array<Address>,
    finishedBlocks: Array<BigInt>,
    signature: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "batchSubmitRewards",
      "batchSubmitRewards(uint256,address,uint256,uint256,address[],uint256[],bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(batchId),
        ethereum.Value.fromAddress(payeer),
        ethereum.Value.fromUnsignedBigInt(startEpoch),
        ethereum.Value.fromUnsignedBigInt(endEpoch),
        ethereum.Value.fromAddressArray(sequencers),
        ethereum.Value.fromUnsignedBigIntArray(finishedBlocks),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bridge(): Address {
    let result = super.call("bridge", "bridge():(address)", []);

    return result[0].toAddress();
  }

  try_bridge(): ethereum.CallResult<Address> {
    let result = super.tryCall("bridge", "bridge():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentBatch(): BigInt {
    let result = super.call("currentBatch", "currentBatch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentBatch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentBatch", "currentBatch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentSequencerSetSize(): BigInt {
    let result = super.call(
      "currentSequencerSetSize",
      "currentSequencerSetSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentSequencerSetSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentSequencerSetSize",
      "currentSequencerSetSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentSequencerSetTotalLock(): BigInt {
    let result = super.call(
      "currentSequencerSetTotalLock",
      "currentSequencerSetTotalLock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentSequencerSetTotalLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentSequencerSetTotalLock",
      "currentSequencerSetTotalLock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentUnlockedInit(): BigInt {
    let result = super.call(
      "currentUnlockedInit",
      "currentUnlockedInit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentUnlockedInit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentUnlockedInit",
      "currentUnlockedInit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchMpcAddress(blockHeight: BigInt): Address {
    let result = super.call(
      "fetchMpcAddress",
      "fetchMpcAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(blockHeight)]
    );

    return result[0].toAddress();
  }

  try_fetchMpcAddress(blockHeight: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fetchMpcAddress",
      "fetchMpcAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(blockHeight)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getL2ChainId(): BigInt {
    let result = super.call("getL2ChainId", "getL2ChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getL2ChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getL2ChainId", "getL2ChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSequencerId(user: Address): BigInt {
    let result = super.call(
      "getSequencerId",
      "getSequencerId(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getSequencerId(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSequencerId",
      "getSequencerId(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isSequencer(sequencerId: BigInt): boolean {
    let result = super.call("isSequencer", "isSequencer(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(sequencerId)
    ]);

    return result[0].toBoolean();
  }

  try_isSequencer(sequencerId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSequencer", "isSequencer(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(sequencerId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  l1Token(): Address {
    let result = super.call("l1Token", "l1Token():(address)", []);

    return result[0].toAddress();
  }

  try_l1Token(): ethereum.CallResult<Address> {
    let result = super.tryCall("l1Token", "l1Token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  l2Gas(): BigInt {
    let result = super.call("l2Gas", "l2Gas():(uint32)", []);

    return result[0].toBigInt();
  }

  try_l2Gas(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("l2Gas", "l2Gas():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  l2Token(): Address {
    let result = super.call("l2Token", "l2Token():(address)", []);

    return result[0].toAddress();
  }

  try_l2Token(): ethereum.CallResult<Address> {
    let result = super.tryCall("l2Token", "l2Token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  latestSignerUpdateBatch(param0: BigInt): BigInt {
    let result = super.call(
      "latestSignerUpdateBatch",
      "latestSignerUpdateBatch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_latestSignerUpdateBatch(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestSignerUpdateBatch",
      "latestSignerUpdateBatch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  logger(): Address {
    let result = super.call("logger", "logger():(address)", []);

    return result[0].toAddress();
  }

  try_logger(): ethereum.CallResult<Address> {
    let result = super.tryCall("logger", "logger():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minLock(): BigInt {
    let result = super.call("minLock", "minLock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minLock", "minLock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mpcAddress(): Address {
    let result = super.call("mpcAddress", "mpcAddress():(address)", []);

    return result[0].toAddress();
  }

  try_mpcAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("mpcAddress", "mpcAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mpcHistory(param0: BigInt): Lock__mpcHistoryResult {
    let result = super.call(
      "mpcHistory",
      "mpcHistory(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Lock__mpcHistoryResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_mpcHistory(param0: BigInt): ethereum.CallResult<Lock__mpcHistoryResult> {
    let result = super.tryCall(
      "mpcHistory",
      "mpcHistory(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lock__mpcHistoryResult(value[0].toBigInt(), value[1].toAddress())
    );
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pause(): boolean {
    let result = super.call("pause", "pause():(bool)", []);

    return result[0].toBoolean();
  }

  try_pause(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pause", "pause():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sequencerLock(sequencerId: BigInt): BigInt {
    let result = super.call(
      "sequencerLock",
      "sequencerLock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sequencerId)]
    );

    return result[0].toBigInt();
  }

  try_sequencerLock(sequencerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sequencerLock",
      "sequencerLock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sequencerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sequencerReward(sequencerId: BigInt): BigInt {
    let result = super.call(
      "sequencerReward",
      "sequencerReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sequencerId)]
    );

    return result[0].toBigInt();
  }

  try_sequencerReward(sequencerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sequencerReward",
      "sequencerReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sequencerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sequencerState(): Lock__sequencerStateResult {
    let result = super.call(
      "sequencerState",
      "sequencerState():(uint256,uint256)",
      []
    );

    return new Lock__sequencerStateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_sequencerState(): ethereum.CallResult<Lock__sequencerStateResult> {
    let result = super.tryCall(
      "sequencerState",
      "sequencerState():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lock__sequencerStateResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  sequencerStateChanges(param0: BigInt): Lock__sequencerStateChangesResult {
    let result = super.call(
      "sequencerStateChanges",
      "sequencerStateChanges(uint256):(int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Lock__sequencerStateChangesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_sequencerStateChanges(
    param0: BigInt
  ): ethereum.CallResult<Lock__sequencerStateChangesResult> {
    let result = super.tryCall(
      "sequencerStateChanges",
      "sequencerStateChanges(uint256):(int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lock__sequencerStateChangesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  sequencerThreshold(): BigInt {
    let result = super.call(
      "sequencerThreshold",
      "sequencerThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sequencerThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sequencerThreshold",
      "sequencerThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sequencers(param0: BigInt): Lock__sequencersResult {
    let result = super.call(
      "sequencers",
      "sequencers(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,address,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Lock__sequencersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toI32(),
      result[8].toBigInt()
    );
  }

  try_sequencers(param0: BigInt): ethereum.CallResult<Lock__sequencersResult> {
    let result = super.tryCall(
      "sequencers",
      "sequencers(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,address,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lock__sequencersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toI32(),
        value[8].toBigInt()
      )
    );
  }

  signerToSequencer(param0: Address): BigInt {
    let result = super.call(
      "signerToSequencer",
      "signerToSequencer(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_signerToSequencer(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signerToSequencer",
      "signerToSequencer(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signerUpdateLimit(): BigInt {
    let result = super.call(
      "signerUpdateLimit",
      "signerUpdateLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_signerUpdateLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signerUpdateLimit",
      "signerUpdateLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signers(param0: BigInt): Address {
    let result = super.call("signers", "signers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_signers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("signers", "signers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalLocked(): BigInt {
    let result = super.call("totalLocked", "totalLocked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLocked", "totalLocked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsLiquidated(): BigInt {
    let result = super.call(
      "totalRewardsLiquidated",
      "totalRewardsLiquidated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRewardsLiquidated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardsLiquidated",
      "totalRewardsLiquidated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalDelay(): BigInt {
    let result = super.call(
      "withdrawalDelay",
      "withdrawalDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawalDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalDelay",
      "withdrawalDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BatchSubmitRewardsCall extends ethereum.Call {
  get inputs(): BatchSubmitRewardsCall__Inputs {
    return new BatchSubmitRewardsCall__Inputs(this);
  }

  get outputs(): BatchSubmitRewardsCall__Outputs {
    return new BatchSubmitRewardsCall__Outputs(this);
  }
}

export class BatchSubmitRewardsCall__Inputs {
  _call: BatchSubmitRewardsCall;

  constructor(call: BatchSubmitRewardsCall) {
    this._call = call;
  }

  get batchId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payeer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get startEpoch(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endEpoch(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get sequencers(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get finishedBlocks(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get signature(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class BatchSubmitRewardsCall__Outputs {
  _call: BatchSubmitRewardsCall;

  constructor(call: BatchSubmitRewardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ForceUnlockCall extends ethereum.Call {
  get inputs(): ForceUnlockCall__Inputs {
    return new ForceUnlockCall__Inputs(this);
  }

  get outputs(): ForceUnlockCall__Outputs {
    return new ForceUnlockCall__Outputs(this);
  }
}

export class ForceUnlockCall__Inputs {
  _call: ForceUnlockCall;

  constructor(call: ForceUnlockCall) {
    this._call = call;
  }

  get sequencerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get withdrawRewardToL2(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ForceUnlockCall__Outputs {
  _call: ForceUnlockCall;

  constructor(call: ForceUnlockCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bridge(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _l1Token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _l2Token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _l2Gas(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _NFTContract(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _mpc(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class InsertSignersCall extends ethereum.Call {
  get inputs(): InsertSignersCall__Inputs {
    return new InsertSignersCall__Inputs(this);
  }

  get outputs(): InsertSignersCall__Outputs {
    return new InsertSignersCall__Outputs(this);
  }
}

export class InsertSignersCall__Inputs {
  _call: InsertSignersCall;

  constructor(call: InsertSignersCall) {
    this._call = call;
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class InsertSignersCall__Outputs {
  _call: InsertSignersCall;

  constructor(call: InsertSignersCall) {
    this._call = call;
  }
}

export class LockForCall extends ethereum.Call {
  get inputs(): LockForCall__Inputs {
    return new LockForCall__Inputs(this);
  }

  get outputs(): LockForCall__Outputs {
    return new LockForCall__Outputs(this);
  }
}

export class LockForCall__Inputs {
  _call: LockForCall;

  constructor(call: LockForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signerPubkey(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class LockForCall__Outputs {
  _call: LockForCall;

  constructor(call: LockForCall) {
    this._call = call;
  }
}

export class RelockCall extends ethereum.Call {
  get inputs(): RelockCall__Inputs {
    return new RelockCall__Inputs(this);
  }

  get outputs(): RelockCall__Outputs {
    return new RelockCall__Outputs(this);
  }
}

export class RelockCall__Inputs {
  _call: RelockCall;

  constructor(call: RelockCall) {
    this._call = call;
  }

  get sequencerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lockRewards(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RelockCall__Outputs {
  _call: RelockCall;

  constructor(call: RelockCall) {
    this._call = call;
  }
}

export class SetCurrentBatchCall extends ethereum.Call {
  get inputs(): SetCurrentBatchCall__Inputs {
    return new SetCurrentBatchCall__Inputs(this);
  }

  get outputs(): SetCurrentBatchCall__Outputs {
    return new SetCurrentBatchCall__Outputs(this);
  }
}

export class SetCurrentBatchCall__Inputs {
  _call: SetCurrentBatchCall;

  constructor(call: SetCurrentBatchCall) {
    this._call = call;
  }

  get _currentBatch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurrentBatchCall__Outputs {
  _call: SetCurrentBatchCall;

  constructor(call: SetCurrentBatchCall) {
    this._call = call;
  }
}

export class SetLockingTokenCall extends ethereum.Call {
  get inputs(): SetLockingTokenCall__Inputs {
    return new SetLockingTokenCall__Inputs(this);
  }

  get outputs(): SetLockingTokenCall__Outputs {
    return new SetLockingTokenCall__Outputs(this);
  }
}

export class SetLockingTokenCall__Inputs {
  _call: SetLockingTokenCall;

  constructor(call: SetLockingTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLockingTokenCall__Outputs {
  _call: SetLockingTokenCall;

  constructor(call: SetLockingTokenCall) {
    this._call = call;
  }
}

export class SetPauseCall extends ethereum.Call {
  get inputs(): SetPauseCall__Inputs {
    return new SetPauseCall__Inputs(this);
  }

  get outputs(): SetPauseCall__Outputs {
    return new SetPauseCall__Outputs(this);
  }
}

export class SetPauseCall__Inputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }
}

export class SetPauseCall__Outputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }
}

export class SetUnpauseCall extends ethereum.Call {
  get inputs(): SetUnpauseCall__Inputs {
    return new SetUnpauseCall__Inputs(this);
  }

  get outputs(): SetUnpauseCall__Outputs {
    return new SetUnpauseCall__Outputs(this);
  }
}

export class SetUnpauseCall__Inputs {
  _call: SetUnpauseCall;

  constructor(call: SetUnpauseCall) {
    this._call = call;
  }
}

export class SetUnpauseCall__Outputs {
  _call: SetUnpauseCall;

  constructor(call: SetUnpauseCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }

  get sequencerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get withdrawRewardToL2(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockClaimCall extends ethereum.Call {
  get inputs(): UnlockClaimCall__Inputs {
    return new UnlockClaimCall__Inputs(this);
  }

  get outputs(): UnlockClaimCall__Outputs {
    return new UnlockClaimCall__Outputs(this);
  }
}

export class UnlockClaimCall__Inputs {
  _call: UnlockClaimCall;

  constructor(call: UnlockClaimCall) {
    this._call = call;
  }

  get sequencerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get withdrawToL2(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UnlockClaimCall__Outputs {
  _call: UnlockClaimCall;

  constructor(call: UnlockClaimCall) {
    this._call = call;
  }
}

export class UpdateBlockRewardCall extends ethereum.Call {
  get inputs(): UpdateBlockRewardCall__Inputs {
    return new UpdateBlockRewardCall__Inputs(this);
  }

  get outputs(): UpdateBlockRewardCall__Outputs {
    return new UpdateBlockRewardCall__Outputs(this);
  }
}

export class UpdateBlockRewardCall__Inputs {
  _call: UpdateBlockRewardCall;

  constructor(call: UpdateBlockRewardCall) {
    this._call = call;
  }

  get newReward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateBlockRewardCall__Outputs {
  _call: UpdateBlockRewardCall;

  constructor(call: UpdateBlockRewardCall) {
    this._call = call;
  }
}

export class UpdateLockingInfoCall extends ethereum.Call {
  get inputs(): UpdateLockingInfoCall__Inputs {
    return new UpdateLockingInfoCall__Inputs(this);
  }

  get outputs(): UpdateLockingInfoCall__Outputs {
    return new UpdateLockingInfoCall__Outputs(this);
  }
}

export class UpdateLockingInfoCall__Inputs {
  _call: UpdateLockingInfoCall;

  constructor(call: UpdateLockingInfoCall) {
    this._call = call;
  }

  get _lockingInfo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateLockingInfoCall__Outputs {
  _call: UpdateLockingInfoCall;

  constructor(call: UpdateLockingInfoCall) {
    this._call = call;
  }
}

export class UpdateMinAmountsCall extends ethereum.Call {
  get inputs(): UpdateMinAmountsCall__Inputs {
    return new UpdateMinAmountsCall__Inputs(this);
  }

  get outputs(): UpdateMinAmountsCall__Outputs {
    return new UpdateMinAmountsCall__Outputs(this);
  }
}

export class UpdateMinAmountsCall__Inputs {
  _call: UpdateMinAmountsCall;

  constructor(call: UpdateMinAmountsCall) {
    this._call = call;
  }

  get _minLock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinAmountsCall__Outputs {
  _call: UpdateMinAmountsCall;

  constructor(call: UpdateMinAmountsCall) {
    this._call = call;
  }
}

export class UpdateMpcCall extends ethereum.Call {
  get inputs(): UpdateMpcCall__Inputs {
    return new UpdateMpcCall__Inputs(this);
  }

  get outputs(): UpdateMpcCall__Outputs {
    return new UpdateMpcCall__Outputs(this);
  }
}

export class UpdateMpcCall__Inputs {
  _call: UpdateMpcCall;

  constructor(call: UpdateMpcCall) {
    this._call = call;
  }

  get _newMpc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateMpcCall__Outputs {
  _call: UpdateMpcCall;

  constructor(call: UpdateMpcCall) {
    this._call = call;
  }
}

export class UpdateNFTContractCall extends ethereum.Call {
  get inputs(): UpdateNFTContractCall__Inputs {
    return new UpdateNFTContractCall__Inputs(this);
  }

  get outputs(): UpdateNFTContractCall__Outputs {
    return new UpdateNFTContractCall__Outputs(this);
  }
}

export class UpdateNFTContractCall__Inputs {
  _call: UpdateNFTContractCall;

  constructor(call: UpdateNFTContractCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateNFTContractCall__Outputs {
  _call: UpdateNFTContractCall;

  constructor(call: UpdateNFTContractCall) {
    this._call = call;
  }
}

export class UpdateSequencerThresholdCall extends ethereum.Call {
  get inputs(): UpdateSequencerThresholdCall__Inputs {
    return new UpdateSequencerThresholdCall__Inputs(this);
  }

  get outputs(): UpdateSequencerThresholdCall__Outputs {
    return new UpdateSequencerThresholdCall__Outputs(this);
  }
}

export class UpdateSequencerThresholdCall__Inputs {
  _call: UpdateSequencerThresholdCall;

  constructor(call: UpdateSequencerThresholdCall) {
    this._call = call;
  }

  get newThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSequencerThresholdCall__Outputs {
  _call: UpdateSequencerThresholdCall;

  constructor(call: UpdateSequencerThresholdCall) {
    this._call = call;
  }
}

export class UpdateSignerCall extends ethereum.Call {
  get inputs(): UpdateSignerCall__Inputs {
    return new UpdateSignerCall__Inputs(this);
  }

  get outputs(): UpdateSignerCall__Outputs {
    return new UpdateSignerCall__Outputs(this);
  }
}

export class UpdateSignerCall__Inputs {
  _call: UpdateSignerCall;

  constructor(call: UpdateSignerCall) {
    this._call = call;
  }

  get sequencerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signerPubkey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateSignerCall__Outputs {
  _call: UpdateSignerCall;

  constructor(call: UpdateSignerCall) {
    this._call = call;
  }
}

export class UpdateSignerUpdateLimitCall extends ethereum.Call {
  get inputs(): UpdateSignerUpdateLimitCall__Inputs {
    return new UpdateSignerUpdateLimitCall__Inputs(this);
  }

  get outputs(): UpdateSignerUpdateLimitCall__Outputs {
    return new UpdateSignerUpdateLimitCall__Outputs(this);
  }
}

export class UpdateSignerUpdateLimitCall__Inputs {
  _call: UpdateSignerUpdateLimitCall;

  constructor(call: UpdateSignerUpdateLimitCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSignerUpdateLimitCall__Outputs {
  _call: UpdateSignerUpdateLimitCall;

  constructor(call: UpdateSignerUpdateLimitCall) {
    this._call = call;
  }
}

export class UpdateWithdrwDelayTimeValueCall extends ethereum.Call {
  get inputs(): UpdateWithdrwDelayTimeValueCall__Inputs {
    return new UpdateWithdrwDelayTimeValueCall__Inputs(this);
  }

  get outputs(): UpdateWithdrwDelayTimeValueCall__Outputs {
    return new UpdateWithdrwDelayTimeValueCall__Outputs(this);
  }
}

export class UpdateWithdrwDelayTimeValueCall__Inputs {
  _call: UpdateWithdrwDelayTimeValueCall;

  constructor(call: UpdateWithdrwDelayTimeValueCall) {
    this._call = call;
  }

  get newWithdrwDelayTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateWithdrwDelayTimeValueCall__Outputs {
  _call: UpdateWithdrwDelayTimeValueCall;

  constructor(call: UpdateWithdrwDelayTimeValueCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get sequencerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get withdrawToL2(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}
