// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EpochUpdated extends ethereum.Event {
  get params(): EpochUpdated__Params {
    return new EpochUpdated__Params(this);
  }
}

export class EpochUpdated__Params {
  _event: EpochUpdated;

  constructor(event: EpochUpdated) {
    this._event = event;
  }

  get _newLength(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MpcAddressUpdated extends ethereum.Event {
  get params(): MpcAddressUpdated__Params {
    return new MpcAddressUpdated__Params(this);
  }
}

export class MpcAddressUpdated__Params {
  _event: MpcAddressUpdated;

  constructor(event: MpcAddressUpdated) {
    this._event = event;
  }

  get _newMpcAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewEpoch extends ethereum.Event {
  get params(): NewEpoch__Params {
    return new NewEpoch__Params(this);
  }
}

export class NewEpoch__Params {
  _event: NewEpoch;

  constructor(event: NewEpoch) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signer(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReCommitEpoch extends ethereum.Event {
  get params(): ReCommitEpoch__Params {
    return new ReCommitEpoch__Params(this);
  }
}

export class ReCommitEpoch__Params {
  _event: ReCommitEpoch;

  constructor(event: ReCommitEpoch) {
    this._event = event;
  }

  get oldEpochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newEpochId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startBlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newSigner(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class MetisValidatorSet__epochsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class MetisValidatorSet extends ethereum.SmartContract {
  static bind(address: Address): MetisValidatorSet {
    return new MetisValidatorSet("MetisValidatorSet", address);
  }

  currentEpochNumber(): BigInt {
    let result = super.call(
      "currentEpochNumber",
      "currentEpochNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentEpochNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEpochNumber",
      "currentEpochNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochLength(): BigInt {
    let result = super.call("epochLength", "epochLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochLength", "epochLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochNumbers(param0: BigInt): BigInt {
    let result = super.call("epochNumbers", "epochNumbers(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_epochNumbers(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochNumbers",
      "epochNumbers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochs(param0: BigInt): MetisValidatorSet__epochsResult {
    let result = super.call(
      "epochs",
      "epochs(uint256):(uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MetisValidatorSet__epochsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_epochs(
    param0: BigInt
  ): ethereum.CallResult<MetisValidatorSet__epochsResult> {
    let result = super.tryCall(
      "epochs",
      "epochs(uint256):(uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MetisValidatorSet__epochsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  firstEndBlock(): BigInt {
    let result = super.call("firstEndBlock", "firstEndBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_firstEndBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstEndBlock",
      "firstEndBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochByBlock(number: BigInt): BigInt {
    let result = super.call(
      "getEpochByBlock",
      "getEpochByBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );

    return result[0].toBigInt();
  }

  try_getEpochByBlock(number: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochByBlock",
      "getEpochByBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMetisSequencer(number: BigInt): Address {
    let result = super.call(
      "getMetisSequencer",
      "getMetisSequencer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );

    return result[0].toAddress();
  }

  try_getMetisSequencer(number: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMetisSequencer",
      "getMetisSequencer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initialSequencer(): Address {
    let result = super.call(
      "initialSequencer",
      "initialSequencer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_initialSequencer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "initialSequencer",
      "initialSequencer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mpcAddress(): Address {
    let result = super.call("mpcAddress", "mpcAddress():(address)", []);

    return result[0].toAddress();
  }

  try_mpcAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("mpcAddress", "mpcAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class UpdateEpochLengthCall extends ethereum.Call {
  get inputs(): UpdateEpochLengthCall__Inputs {
    return new UpdateEpochLengthCall__Inputs(this);
  }

  get outputs(): UpdateEpochLengthCall__Outputs {
    return new UpdateEpochLengthCall__Outputs(this);
  }
}

export class UpdateEpochLengthCall__Inputs {
  _call: UpdateEpochLengthCall;

  constructor(call: UpdateEpochLengthCall) {
    this._call = call;
  }

  get _newLength(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEpochLengthCall__Outputs {
  _call: UpdateEpochLengthCall;

  constructor(call: UpdateEpochLengthCall) {
    this._call = call;
  }
}

export class UpdateMpcAddressCall extends ethereum.Call {
  get inputs(): UpdateMpcAddressCall__Inputs {
    return new UpdateMpcAddressCall__Inputs(this);
  }

  get outputs(): UpdateMpcAddressCall__Outputs {
    return new UpdateMpcAddressCall__Outputs(this);
  }
}

export class UpdateMpcAddressCall__Inputs {
  _call: UpdateMpcAddressCall;

  constructor(call: UpdateMpcAddressCall) {
    this._call = call;
  }

  get _newMpc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateMpcAddressCall__Outputs {
  _call: UpdateMpcAddressCall;

  constructor(call: UpdateMpcAddressCall) {
    this._call = call;
  }
}

export class CommitEpochCall extends ethereum.Call {
  get inputs(): CommitEpochCall__Inputs {
    return new CommitEpochCall__Inputs(this);
  }

  get outputs(): CommitEpochCall__Outputs {
    return new CommitEpochCall__Outputs(this);
  }
}

export class CommitEpochCall__Inputs {
  _call: CommitEpochCall;

  constructor(call: CommitEpochCall) {
    this._call = call;
  }

  get newEpoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get startBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CommitEpochCall__Outputs {
  _call: CommitEpochCall;

  constructor(call: CommitEpochCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _initialSequencer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _mpcAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _firstEndBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _epochLength(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RecommitEpochCall extends ethereum.Call {
  get inputs(): RecommitEpochCall__Inputs {
    return new RecommitEpochCall__Inputs(this);
  }

  get outputs(): RecommitEpochCall__Outputs {
    return new RecommitEpochCall__Outputs(this);
  }
}

export class RecommitEpochCall__Inputs {
  _call: RecommitEpochCall;

  constructor(call: RecommitEpochCall) {
    this._call = call;
  }

  get oldEpochId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newEpochId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get startBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newSigner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RecommitEpochCall__Outputs {
  _call: RecommitEpochCall;

  constructor(call: RecommitEpochCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
